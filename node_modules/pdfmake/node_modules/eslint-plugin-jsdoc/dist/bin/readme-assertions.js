"use strict";

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _lodash = _interopRequireDefault(require("lodash"));

var _glob = _interopRequireDefault(require("glob"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This script is used to inline assertions into the README.md documents.
 */
const trimCode = code => {
  let lines = code.trim().split('\n');
  const indendation = lines[lines.length - 1].match(/^\s+/);
  const indentSize = indendation ? indendation[0].length : 0;
  lines = lines.map((line, index) => {
    if (index === 0) {
      return line;
    }

    return line.slice(indentSize);
  });
  return lines.join('\n');
};

const formatCodeSnippet = setup => {
  const paragraphs = [];
  paragraphs.push(trimCode(setup.code));

  if (setup.settings) {
    paragraphs.push('// Settings: ' + JSON.stringify(setup.settings));
  }

  if (setup.options) {
    paragraphs.push('// Options: ' + JSON.stringify(setup.options));
  }

  if (setup.errors) {
    paragraphs.push('// Message: ' + setup.errors[0].message);
  }

  return paragraphs.join('\n');
};

const getAssertions = () => {
  const assertionFiles = _glob.default.sync(_path.default.resolve(__dirname, '../../test/rules/assertions/*.js'));

  const assertionNames = assertionFiles.map(filePath => {
    return _path.default.basename(filePath, '.js');
  });
  const assertionCodes = assertionFiles.map(filePath => {
    // eslint-disable-next-line global-require, import/no-dynamic-require
    const codes = require(filePath);

    return {
      invalid: _lodash.default.map(codes.invalid, formatCodeSnippet),
      valid: _lodash.default.map(codes.valid, formatCodeSnippet)
    };
  });
  return _lodash.default.zipObject(assertionNames, assertionCodes);
};

const updateDocuments = assertions => {
  const readmeDocumentPath = _path.default.join(__dirname, '../../README.md');

  let documentBody = _fs.default.readFileSync(readmeDocumentPath, 'utf8');

  documentBody = documentBody.replace(/<!-- assertions ([a-z]+?) -->/ig, assertionsBlock => {
    const ruleName = assertionsBlock.match(/assertions ([a-z]+)/i)[1];
    const ruleAssertions = assertions[ruleName];

    if (!ruleAssertions) {
      throw new Error('No assertions available for rule "' + ruleName + '".');
    }

    return 'The following patterns are considered problems:\n\n````js\n' + ruleAssertions.invalid.join('\n\n') + '\n````\n\nThe following patterns are not considered problems:\n\n````js\n' + ruleAssertions.valid.join('\n\n') + '\n````\n';
  });

  _fs.default.writeFileSync(readmeDocumentPath, documentBody);
};

updateDocuments(getAssertions());
//# sourceMappingURL=readme-assertions.js.map
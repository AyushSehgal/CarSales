{"version":3,"sources":["../../src/rules/matchDescription.js"],"names":["tagsWithDescriptions","jsdoc","report","context","utils","options","validateDescription","description","tag","regex","RegExp","tags","matchDescription","test","Object","keys","length","filterTags","includes","hasOwnProperty","call","some","_","trimStart","meta","schema","additionalProperties","properties","format","type","patternProperties","oneOf","enum"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,oBAAoB,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,UAAjB,EAA6B,SAA7B,EAAwC,QAAxC,CAA7B;;eAEe,2BAAa,CAAC;AAC3BC,EAAAA,KAD2B;AAE3BC,EAAAA,MAF2B;AAG3BC,EAAAA,OAH2B;AAI3BC,EAAAA;AAJ2B,CAAD,KAKtB;AACJ,QAAMC,OAAO,GAAGF,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,EAAtC;;AAEA,QAAMC,mBAAmB,GAAG,CAACC,WAAD,EAAcC,GAAd,KAAsB;AAChD,UAAMC,KAAK,GAAG,IAAIC,MAAJ,CACZ,CAACF,GAAG,IAAI,OAAOH,OAAO,CAACM,IAAR,CAAaH,GAAb,CAAP,KAA6B,QAApC,GAA+CH,OAAO,CAACM,IAAR,CAAaH,GAAb,CAA/C,GACCH,OAAO,CAACO,gBADV,CAGA;AACA;AAJA,SAKK,kCANO,EAOZ,GAPY,CAAd;;AAUA,QAAI,CAACH,KAAK,CAACI,IAAN,CAAWN,WAAX,CAAL,EAA8B;AAC5BL,MAAAA,MAAM,CAAC,uDAAD,CAAN;AAEA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,GAlBD;;AAoBA,MAAID,KAAK,CAACM,WAAN,IAAqBD,mBAAmB,CAACL,KAAK,CAACM,WAAP,CAA5C,EAAiE;AAC/D;AACD;;AAED,MAAI,CAACF,OAAO,CAACM,IAAT,IAAiB,CAACG,MAAM,CAACC,IAAP,CAAYV,OAAO,CAACM,IAApB,EAA0BK,MAAhD,EAAwD;AACtD;AACD;;AAED,QAAML,IAAI,GAAGP,KAAK,CAACa,UAAN,CAAiB,CAAC;AAACT,IAAAA;AAAD,GAAD,KAAW;AACvC,WAAOR,oBAAoB,CAACkB,QAArB,CAA8BV,GAA9B,KACL,GAAGW,cAAH,CAAkBC,IAAlB,CAAuBf,OAAO,CAACM,IAA/B,EAAqCH,GAArC,CADK,IACwCH,OAAO,CAACM,IAAR,CAAaH,GAAb,CAD/C;AAED,GAHY,CAAb;AAKAG,EAAAA,IAAI,CAACU,IAAL,CAAWb,GAAD,IAAS;AACjB,UAAMD,WAAW,GAAGe,gBAAEC,SAAF,CAAYf,GAAG,CAACD,WAAhB,EAA6B,IAA7B,CAApB;;AAEA,WAAOD,mBAAmB,CAACC,WAAD,EAAcC,GAAG,CAACA,GAAlB,CAA1B;AACD,GAJD;AAKD,CA9Cc,EA8CZ;AACDgB,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,oBAAoB,EAAE,KADxB;AAEEC,MAAAA,UAAU,EAAE;AACVf,QAAAA,gBAAgB,EAAE;AAChBgB,UAAAA,MAAM,EAAE,OADQ;AAEhBC,UAAAA,IAAI,EAAE;AAFU,SADR;AAKVlB,QAAAA,IAAI,EAAE;AACJmB,UAAAA,iBAAiB,EAAE;AACjB,kBAAM;AACJC,cAAAA,KAAK,EAAE,CACL;AACEH,gBAAAA,MAAM,EAAE,OADV;AAEEC,gBAAAA,IAAI,EAAE;AAFR,eADK,EAKL;AACEG,gBAAAA,IAAI,EAAE,CAAC,IAAD,CADR;AAEEH,gBAAAA,IAAI,EAAE;AAFR,eALK;AADH;AADW,WADf;AAeJA,UAAAA,IAAI,EAAE;AAfF;AALI,OAFd;AAyBEA,MAAAA,IAAI,EAAE;AAzBR,KADM,CADJ;AA8BJA,IAAAA,IAAI,EAAE;AA9BF;AADL,CA9CY,C","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst tagsWithDescriptions = ['param', 'arg', 'argument', 'returns', 'return'];\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report,\n  context,\n  utils\n}) => {\n  const options = context.options[0] || {};\n\n  const validateDescription = (description, tag) => {\n    const regex = new RegExp(\n      (tag && typeof options.tags[tag] === 'string' ? options.tags[tag] :\n        options.matchDescription\n\n      // If supporting Node >= 10, we could loosen to this for the\n      //   initial letter: \\\\p{Upper}\n      ) || '^[A-Z`\\\\d_](?:[\\\\s\\\\S]*[.?!`])?$',\n      'u'\n    );\n\n    if (!regex.test(description)) {\n      report('JSDoc description does not satisfy the regex pattern.');\n\n      return true;\n    }\n\n    return false;\n  };\n\n  if (jsdoc.description && validateDescription(jsdoc.description)) {\n    return;\n  }\n\n  if (!options.tags || !Object.keys(options.tags).length) {\n    return;\n  }\n\n  const tags = utils.filterTags(({tag}) => {\n    return tagsWithDescriptions.includes(tag) &&\n      {}.hasOwnProperty.call(options.tags, tag) && options.tags[tag];\n  });\n\n  tags.some((tag) => {\n    const description = _.trimStart(tag.description, '- ');\n\n    return validateDescription(description, tag.tag);\n  });\n}, {\n  meta: {\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          matchDescription: {\n            format: 'regex',\n            type: 'string'\n          },\n          tags: {\n            patternProperties: {\n              '.*': {\n                oneOf: [\n                  {\n                    format: 'regex',\n                    type: 'string'\n                  },\n                  {\n                    enum: [true],\n                    type: 'boolean'\n                  }\n                ]\n              }\n            },\n            type: 'object'\n          }\n        },\n        type: 'object'\n      }\n    ],\n    type: 'suggestion'\n  }\n});\n"],"file":"matchDescription.js"}
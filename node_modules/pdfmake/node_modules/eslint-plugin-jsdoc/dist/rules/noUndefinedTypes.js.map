{"version":3,"sources":["../../src/rules/noUndefinedTypes.js"],"names":["extraTypes","context","report","sourceCode","utils","scopeManager","globalScope","options","preferredTypesDefined","definedTypes","definedPreferredTypes","preferredTypes","_","get","values","map","preferredType","undefined","replacement","filter","typedefDeclarations","getAllComments","comment","value","startsWith","parseComment","flatMap","doc","tags","tag","isNamepathDefiningTag","name","allDefinedTypes","variables","variable","concat","__options","nodejsScope","isModule","childScopes","reduce","arr","push","jsdocTags","filterTags","isTagWithType","forEach","parsedType","type","error","includes","markVariableAsUsed","meta"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {parse as parseType, traverse} from 'jsdoctypeparser';\nimport iterateJsdoc, {parseComment} from '../iterateJsdoc';\n\nconst extraTypes = [\n  'null', 'undefined', 'string', 'boolean', 'object',\n  'function',\n  'number', 'NaN', 'Infinity',\n  'any', '*',\n  'Array', 'Object', 'RegExp', 'Date', 'Function'\n];\n\nexport default iterateJsdoc(({\n  context,\n  report,\n  sourceCode,\n  utils\n}) => {\n  const {scopeManager} = sourceCode;\n  const {globalScope} = scopeManager;\n\n  const {preferredTypesDefined, definedTypes = []} = context.options[0] || {};\n\n  let definedPreferredTypes = [];\n  if (preferredTypesDefined) {\n    const preferredTypes = _.get(context, 'settings.jsdoc.preferredTypes');\n    if (preferredTypes) {\n      // Replace `_.values` with `Object.values` when we may start requiring Node 7+\n      definedPreferredTypes = _.values(preferredTypes).map((preferredType) => {\n        if (typeof preferredType === 'string') {\n          return preferredType;\n        }\n        if (!preferredType || typeof preferredType !== 'object') {\n          return undefined;\n        }\n\n        return preferredType.replacement;\n      }).filter((preferredType) => {\n        return preferredType;\n      });\n    }\n  }\n\n  const typedefDeclarations = _(context.getAllComments())\n    .filter((comment) => {\n      return comment.value.startsWith('*');\n    })\n    .map(parseComment)\n    .flatMap((doc) => {\n      return (doc.tags || []).filter(({tag}) => {\n        return utils.isNamepathDefiningTag(tag);\n      });\n    })\n    .map((tag) => {\n      return tag.name;\n    })\n    .value();\n\n  const allDefinedTypes = globalScope.variables.map((variable) => {\n    return variable.name;\n  })\n\n    // If the file is a module, concat the variables from the module scope.\n    .concat(\n\n      // This covers `commonjs` as well as `node`\n      scopeManager.__options.nodejsScope ||\n      scopeManager.isModule() ?\n        globalScope.childScopes.reduce((arr, {variables}) => {\n          // Flatten\n          arr.push(...variables);\n\n          return arr;\n        }, []).map(({name}) => {\n          return name;\n        }) : []\n    )\n    .concat(extraTypes)\n    .concat(typedefDeclarations)\n    .concat(definedTypes)\n    .concat(definedPreferredTypes);\n\n  const jsdocTags = utils.filterTags((tag) => {\n    return utils.isTagWithType(tag.tag);\n  });\n\n  jsdocTags.forEach((tag) => {\n    let parsedType;\n\n    try {\n      parsedType = parseType(tag.type);\n    } catch (error) {\n      // On syntax error, will be handled by valid-types.\n      return;\n    }\n\n    traverse(parsedType, ({type, name}) => {\n      if (type === 'NAME') {\n        if (!allDefinedTypes.includes(name)) {\n          report('The type \\'' + name + '\\' is undefined.', null, tag);\n        } else if (!_.includes(extraTypes, name)) {\n          context.markVariableAsUsed(name);\n        }\n      }\n    });\n  });\n}, {\n  meta: {\n    type: 'suggestion'\n  }\n});\n"],"file":"noUndefinedTypes.js"}
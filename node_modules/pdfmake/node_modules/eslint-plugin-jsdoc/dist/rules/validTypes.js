"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _jsdoctypeparser = require("jsdoctypeparser");

var _iterateJsdoc = _interopRequireDefault(require("../iterateJsdoc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const asExpression = /as\s+/;

var _default = (0, _iterateJsdoc.default)(({
  jsdoc,
  report,
  utils
}) => {
  if (!jsdoc.tags) {
    return;
  }

  jsdoc.tags.forEach(tag => {
    const validTypeParsing = function validTypeParsing(type) {
      try {
        (0, _jsdoctypeparser.parse)(type);
      } catch (error) {
        if (error.name === 'SyntaxError') {
          report('Syntax error in type: ' + type, null, tag);
          return false;
        }
      }

      return true;
    };

    if (tag.tag === 'borrows') {
      const thisNamepath = tag.description.replace(asExpression, '');

      if (!asExpression.test(tag.description) || !thisNamepath) {
        report('@borrows must have an "as" expression. Found "' + tag.description + '"', null, tag);
        return;
      }

      if (validTypeParsing(thisNamepath)) {
        const thatNamepath = tag.name;
        validTypeParsing(thatNamepath);
      }
    } else if (utils.isNamepathTag(tag.tag)) {
      if (utils.passesEmptyNamepathCheck(tag)) {
        return;
      }

      validTypeParsing(tag.name);
    } else if (tag.type && utils.isTagWithType(tag.tag)) {
      validTypeParsing(tag.type);
    }
  });
}, {
  meta: {
    type: 'suggestion'
  }
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=validTypes.js.map
{"version":3,"sources":["../../src/rules/requireDescriptionCompleteSentence.js"],"names":["extractParagraphs","text","split","extractSentences","replace","filter","sentence","test","map","isNewLinePrecededByAPeriod","lastLineEndsSentence","lines","some","line","isCapitalized","str","toUpperCase","capitalize","charAt","slice","validateDescription","description","report","jsdocNode","sourceCode","tag","paragraphs","paragraph","sentences","fix","fixer","getText","_","last","RegExp","escapeRegExp","sentence_","beginning","reg","$0","$1","replaceText","jsdoc","tags","includes","trimStart","meta","fixable","type"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst extractParagraphs = (text) => {\n  return text.split(/\\n\\n/);\n};\n\nconst extractSentences = (text) => {\n  return text\n\n    // Remove all {} tags.\n    .replace(/\\{[\\s\\S]*?\\}\\s*/g, '')\n    .split(/[.?!](?:\\s+|$)/)\n\n    // Ignore sentences with only whitespaces.\n    .filter((sentence) => {\n      return !/^\\s*$/.test(sentence);\n    })\n\n    // Re-add the dot.\n    .map((sentence) => {\n      return sentence + '.';\n    });\n};\n\nconst isNewLinePrecededByAPeriod = (text) => {\n  let lastLineEndsSentence;\n\n  const lines = text.split('\\n');\n\n  return !lines.some((line) => {\n    if (typeof lastLineEndsSentence === 'boolean' && !lastLineEndsSentence && /^[A-Z]/.test(line)) {\n      return true;\n    }\n\n    lastLineEndsSentence = /[.:?!]$/.test(line);\n\n    return false;\n  });\n};\n\nconst isCapitalized = (str) => {\n  return str[0] === str[0].toUpperCase();\n};\n\nconst capitalize = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nconst validateDescription = (description, report, jsdocNode, sourceCode, tag) => {\n  if (!description) {\n    return false;\n  }\n\n  const paragraphs = extractParagraphs(description);\n\n  return paragraphs.some((paragraph) => {\n    const sentences = extractSentences(paragraph);\n\n    const fix = (fixer) => {\n      let text = sourceCode.getText(jsdocNode);\n\n      if (!/[.:?!]$/.test(paragraph)) {\n        const line = _.last(paragraph.split('\\n'));\n\n        text = text.replace(new RegExp(_.escapeRegExp(line) + '$', 'm'), line + '.');\n      }\n\n      for (const sentence of sentences.filter((sentence_) => {\n        return !isCapitalized(sentence_);\n      })) {\n        const beginning = sentence.split('\\n')[0];\n\n        if (tag) {\n          const reg = new RegExp('(@' + _.escapeRegExp(tag) + '.*)' + _.escapeRegExp(beginning));\n\n          text = text.replace(reg, ($0, $1) => {\n            return $1 + capitalize(beginning);\n          });\n        } else {\n          text = text.replace(beginning, capitalize(beginning));\n        }\n      }\n\n      return fixer.replaceText(jsdocNode, text);\n    };\n\n    if (sentences.some((sentence) => {\n      return !isCapitalized(sentence);\n    })) {\n      report('Sentence should start with an uppercase character.', fix);\n    }\n\n    if (!/[.!?]$/.test(paragraph)) {\n      report('Sentence must end with a period.', fix);\n\n      return true;\n    }\n\n    if (!isNewLinePrecededByAPeriod(paragraph)) {\n      report('A line of text is started with an uppercase character, but preceding line does not end the sentence.');\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n  sourceCode,\n  jsdoc,\n  report,\n  jsdocNode\n}) => {\n  if (validateDescription(jsdoc.description, report, jsdocNode, sourceCode)) {\n    return;\n  }\n\n  const tags = jsdoc.tags.filter((tag) => {\n    return ['param', 'arg', 'argument', 'returns', 'return'].includes(tag.tag);\n  });\n\n  tags.some((tag) => {\n    const description = _.trimStart(tag.description, '- ');\n\n    return validateDescription(description, report, jsdocNode, sourceCode, tag.tag);\n  });\n}, {\n  meta: {\n    fixable: 'code',\n    type: 'suggestion'\n  }\n});\n"],"file":"requireDescriptionCompleteSentence.js"}
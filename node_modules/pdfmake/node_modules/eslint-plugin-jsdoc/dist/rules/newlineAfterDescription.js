"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _iterateJsdoc = _interopRequireDefault(require("../iterateJsdoc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _iterateJsdoc.default)(({
  jsdoc,
  report,
  context,
  jsdocNode,
  sourceCode,
  indent
}) => {
  let always;

  if (!jsdoc.description || !jsdoc.tags.length) {
    return;
  }

  if (_lodash.default.has(context.options, 0)) {
    always = context.options[0] === 'always';
  } else {
    always = true;
  } // The contents of the jsdoc.source and of jsdoc.description is left trimmed.
  // The contents of the jsdoc.description is right trimmed.
  // This gets the text following the description.


  const descriptionEndsWithANewline = jsdoc.source.slice(jsdoc.description.length).startsWith('\n\n');

  if (always) {
    if (!descriptionEndsWithANewline) {
      report('There must be a newline after the description of the JSDoc block.', fixer => {
        const sourceLines = sourceCode.getText(jsdocNode).split('\n');

        const lastDescriptionLine = _lodash.default.findLastIndex(sourceLines, line => {
          return line.includes(_lodash.default.last(jsdoc.description.split('\n')));
        }); // Add the new line


        sourceLines.splice(lastDescriptionLine + 1, 0, indent + ' *');
        return fixer.replaceText(jsdocNode, sourceLines.join('\n'));
      });
    }
  } else if (descriptionEndsWithANewline) {
    report('There must be no newline after the description of the JSDoc block.', fixer => {
      const sourceLines = sourceCode.getText(jsdocNode).split('\n');

      const lastDescriptionLine = _lodash.default.findLastIndex(sourceLines, line => {
        return line.includes(_lodash.default.last(jsdoc.description.split('\n')));
      }); // Remove the extra line


      sourceLines.splice(lastDescriptionLine + 1, 1);
      return fixer.replaceText(jsdocNode, sourceLines.join('\n'));
    });
  }
}, {
  meta: {
    fixable: 'whitespace',
    type: 'layout'
  },
  schema: [{
    enum: ['always'],
    type: 'string'
  }]
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=newlineAfterDescription.js.map
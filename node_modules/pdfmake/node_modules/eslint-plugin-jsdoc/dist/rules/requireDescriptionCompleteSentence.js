"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _iterateJsdoc = _interopRequireDefault(require("../iterateJsdoc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const extractParagraphs = text => {
  return text.split(/\n\n/);
};

const extractSentences = text => {
  return text // Remove all {} tags.
  .replace(/\{[\s\S]*?\}\s*/g, '').split(/[.?!](?:\s+|$)/) // Ignore sentences with only whitespaces.
  .filter(sentence => {
    return !/^\s*$/.test(sentence);
  }) // Re-add the dot.
  .map(sentence => {
    return sentence + '.';
  });
};

const isNewLinePrecededByAPeriod = text => {
  let lastLineEndsSentence;
  const lines = text.split('\n');
  return !lines.some(line => {
    if (typeof lastLineEndsSentence === 'boolean' && !lastLineEndsSentence && /^[A-Z]/.test(line)) {
      return true;
    }

    lastLineEndsSentence = /[.:?!]$/.test(line);
    return false;
  });
};

const isCapitalized = str => {
  return str[0] === str[0].toUpperCase();
};

const capitalize = str => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

const validateDescription = (description, report, jsdocNode, sourceCode, tag) => {
  if (!description) {
    return false;
  }

  const paragraphs = extractParagraphs(description);
  return paragraphs.some(paragraph => {
    const sentences = extractSentences(paragraph);

    const fix = fixer => {
      let text = sourceCode.getText(jsdocNode);

      if (!/[.:?!]$/.test(paragraph)) {
        const line = _lodash.default.last(paragraph.split('\n'));

        text = text.replace(new RegExp(_lodash.default.escapeRegExp(line) + '$', 'm'), line + '.');
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = sentences.filter(sentence_ => {
          return !isCapitalized(sentence_);
        })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const sentence = _step.value;
          const beginning = sentence.split('\n')[0];

          if (tag) {
            const reg = new RegExp('(@' + _lodash.default.escapeRegExp(tag) + '.*)' + _lodash.default.escapeRegExp(beginning));
            text = text.replace(reg, ($0, $1) => {
              return $1 + capitalize(beginning);
            });
          } else {
            text = text.replace(beginning, capitalize(beginning));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return fixer.replaceText(jsdocNode, text);
    };

    if (sentences.some(sentence => {
      return !isCapitalized(sentence);
    })) {
      report('Sentence should start with an uppercase character.', fix);
    }

    if (!/[.!?]$/.test(paragraph)) {
      report('Sentence must end with a period.', fix);
      return true;
    }

    if (!isNewLinePrecededByAPeriod(paragraph)) {
      report('A line of text is started with an uppercase character, but preceding line does not end the sentence.');
      return true;
    }

    return false;
  });
};

var _default = (0, _iterateJsdoc.default)(({
  sourceCode,
  jsdoc,
  report,
  jsdocNode
}) => {
  if (validateDescription(jsdoc.description, report, jsdocNode, sourceCode)) {
    return;
  }

  const tags = jsdoc.tags.filter(tag => {
    return ['param', 'arg', 'argument', 'returns', 'return'].includes(tag.tag);
  });
  tags.some(tag => {
    const description = _lodash.default.trimStart(tag.description, '- ');

    return validateDescription(description, report, jsdocNode, sourceCode, tag.tag);
  });
}, {
  meta: {
    fixable: 'code',
    type: 'suggestion'
  }
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=requireDescriptionCompleteSentence.js.map
{"version":3,"sources":["../../src/rules/requireHyphenBeforeParamDescription.js"],"names":["sourceCode","utils","report","context","jsdocNode","always","targetTagName","getPreferredTagName","_","has","options","forEachTag","jsdocTag","description","startsWith","fixer","lineIndex","line","sourceLines","getText","split","descriptionIndex","lastIndexOf","replacementLine","substring","splice","replacement","join","replaceText","exec","unwantedPart","replace","slice","length","meta","fixable","type","schema","enum"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;eAEe,2BAAa,CAAC;AAC3BA,EAAAA,UAD2B;AAE3BC,EAAAA,KAF2B;AAG3BC,EAAAA,MAH2B;AAI3BC,EAAAA,OAJ2B;AAK3BC,EAAAA;AAL2B,CAAD,KAMtB;AACJ,MAAIC,MAAJ;AAEA,QAAMC,aAAa,GAAGL,KAAK,CAACM,mBAAN,CAA0B,OAA1B,CAAtB;;AAEA,MAAIC,gBAAEC,GAAF,CAAMN,OAAO,CAACO,OAAd,EAAuB,CAAvB,CAAJ,EAA+B;AAC7BL,IAAAA,MAAM,GAAGF,OAAO,CAACO,OAAR,CAAgB,CAAhB,MAAuB,QAAhC;AACD,GAFD,MAEO;AACLL,IAAAA,MAAM,GAAG,IAAT;AACD;;AAEDJ,EAAAA,KAAK,CAACU,UAAN,CAAiBL,aAAjB,EAAiCM,QAAD,IAAc;AAC5C,QAAI,CAACA,QAAQ,CAACC,WAAd,EAA2B;AACzB;AACD;;AAED,QAAIR,MAAJ,EAAY;AACV,UAAI,CAACO,QAAQ,CAACC,WAAT,CAAqBC,UAArB,CAAgC,GAAhC,CAAL,EAA2C;AACzCZ,QAAAA,MAAM,CAAC,oCAAoCI,aAApC,GAAoD,eAArD,EAAuES,KAAD,IAAW;AACrF,gBAAMC,SAAS,GAAGJ,QAAQ,CAACK,IAA3B;AACA,gBAAMC,WAAW,GAAGlB,UAAU,CAACmB,OAAX,CAAmBf,SAAnB,EAA8BgB,KAA9B,CAAoC,IAApC,CAApB,CAFqF,CAIrF;;AACA,gBAAMP,WAAW,GAAGD,QAAQ,CAACC,WAAT,CAAqBO,KAArB,CAA2B,IAA3B,EAAiC,CAAjC,CAApB;AACA,gBAAMC,gBAAgB,GAAGH,WAAW,CAACF,SAAD,CAAX,CAAuBM,WAAvB,CAAmCT,WAAnC,CAAzB;AAEA,gBAAMU,eAAe,GAAGL,WAAW,CAACF,SAAD,CAAX,CACrBQ,SADqB,CACX,CADW,EACRH,gBADQ,IACY,IADZ,GACmBR,WAD3C;AAEAK,UAAAA,WAAW,CAACO,MAAZ,CAAmBT,SAAnB,EAA8B,CAA9B,EAAiCO,eAAjC;AACA,gBAAMG,WAAW,GAAGR,WAAW,CAACS,IAAZ,CAAiB,IAAjB,CAApB;AAEA,iBAAOZ,KAAK,CAACa,WAAN,CAAkBxB,SAAlB,EAA6BsB,WAA7B,CAAP;AACD,SAdK,EAcHd,QAdG,CAAN;AAeD;AACF,KAlBD,MAkBO,IAAIA,QAAQ,CAACC,WAAT,CAAqBC,UAArB,CAAgC,GAAhC,CAAJ,EAA0C;AAC/CZ,MAAAA,MAAM,CAAC,qCAAqCI,aAArC,GAAqD,eAAtD,EAAwES,KAAD,IAAW;AAAA,uBAC/D,OAAOc,IAAP,CAAYjB,QAAQ,CAACC,WAArB,CAD+D;AAAA;AAAA,cAC/EiB,YAD+E;;AAGtF,cAAMJ,WAAW,GAAG1B,UAAU,CAC3BmB,OADiB,CACTf,SADS,EAEjB2B,OAFiB,CAETnB,QAAQ,CAACC,WAFA,EAEaD,QAAQ,CAACC,WAAT,CAAqBmB,KAArB,CAA2BF,YAAY,CAACG,MAAxC,CAFb,CAApB;AAIA,eAAOlB,KAAK,CAACa,WAAN,CAAkBxB,SAAlB,EAA6BsB,WAA7B,CAAP;AACD,OARK,EAQHd,QARG,CAAN;AASD;AACF,GAlCD;AAmCD,CApDc,EAoDZ;AACDsB,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,IAAI,EAAE;AAFF,GADL;AAKDC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,IAAI,EAAE,CAAC,QAAD,CADR;AAEEF,IAAAA,IAAI,EAAE;AAFR,GADM;AALP,CApDY,C","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  sourceCode,\n  utils,\n  report,\n  context,\n  jsdocNode\n}) => {\n  let always;\n\n  const targetTagName = utils.getPreferredTagName('param');\n\n  if (_.has(context.options, 0)) {\n    always = context.options[0] === 'always';\n  } else {\n    always = true;\n  }\n\n  utils.forEachTag(targetTagName, (jsdocTag) => {\n    if (!jsdocTag.description) {\n      return;\n    }\n\n    if (always) {\n      if (!jsdocTag.description.startsWith('-')) {\n        report('There must be a hyphen before @' + targetTagName + ' description.', (fixer) => {\n          const lineIndex = jsdocTag.line;\n          const sourceLines = sourceCode.getText(jsdocNode).split('\\n');\n\n          // Get start index of description, accounting for multi-line descriptions\n          const description = jsdocTag.description.split('\\n')[0];\n          const descriptionIndex = sourceLines[lineIndex].lastIndexOf(description);\n\n          const replacementLine = sourceLines[lineIndex]\n            .substring(0, descriptionIndex) + '- ' + description;\n          sourceLines.splice(lineIndex, 1, replacementLine);\n          const replacement = sourceLines.join('\\n');\n\n          return fixer.replaceText(jsdocNode, replacement);\n        }, jsdocTag);\n      }\n    } else if (jsdocTag.description.startsWith('-')) {\n      report('There must be no hyphen before @' + targetTagName + ' description.', (fixer) => {\n        const [unwantedPart] = /-\\s*/.exec(jsdocTag.description);\n\n        const replacement = sourceCode\n          .getText(jsdocNode)\n          .replace(jsdocTag.description, jsdocTag.description.slice(unwantedPart.length));\n\n        return fixer.replaceText(jsdocNode, replacement);\n      }, jsdocTag);\n    }\n  });\n}, {\n  meta: {\n    fixable: 'code',\n    type: 'layout'\n  },\n  schema: [\n    {\n      enum: ['always'],\n      type: 'string'\n    }\n  ]\n});\n"],"file":"requireHyphenBeforeParamDescription.js"}
{"version":3,"sources":["../../src/rules/requireReturnsCheck.js"],"names":["canSkip","utils","hasATag","isConstructor","report","tagName","getPreferredTagName","tags","getTags","length","hasDefinedTypeReturnTag","hasReturnValue","meta","type"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,OAAO,GAAIC,KAAD,IAAW;AACzB,SAAOA,KAAK,CAACC,OAAN,CAAc,CACnB;AACA;AACA;AACA;AACA;AACA,YANmB,EAOnB,SAPmB,EASnB;AACA;AACA,SAXmB,EAYnB,aAZmB,EAanB,WAbmB,CAAd,KAcDD,KAAK,CAACE,aAAN,EAdN;AAeD,CAhBD;;eAkBe,2BAAa,CAAC;AAC3BC,EAAAA,MAD2B;AAE3BH,EAAAA;AAF2B,CAAD,KAGtB;AACJ,MAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClB;AACD;;AAED,QAAMI,OAAO,GAAGJ,KAAK,CAACK,mBAAN,CAA0B,SAA1B,CAAhB;AACA,QAAMC,IAAI,GAAGN,KAAK,CAACO,OAAN,CAAcH,OAAd,CAAb;;AAEA,MAAIE,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACrB;AACD;;AAED,MAAIF,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnBL,IAAAA,MAAM,CAAC,0BAA0BC,OAA1B,GAAoC,eAArC,CAAN;AAEA;AACD,GAhBG,CAkBJ;;;AACA,MAAIJ,KAAK,CAACS,uBAAN,CAA8BH,IAAI,CAAC,CAAD,CAAlC,KAA0C,CAACN,KAAK,CAACU,cAAN,EAA/C,EAAuE;AACrEP,IAAAA,MAAM,CAAC,YAAYC,OAAZ,GAAsB,uEAAvB,CAAN;AACD;AACF,CAzBc,EAyBZ;AACDO,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAE;AADF;AADL,CAzBY,C","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nconst canSkip = (utils) => {\n  return utils.hasATag([\n    // An abstract function is by definition incomplete\n    // so it is perfectly fine if a return is documented but\n    // not present within the function.\n    // A subclass may inherit the doc and implement the\n    // missing return.\n    'abstract',\n    'virtual',\n\n    // A constructor function returns `this` by default, so may be `@returns`\n    //   tag indicating this but no explicit return\n    'class',\n    'constructor',\n    'interface'\n  ]) || utils.isConstructor();\n};\n\nexport default iterateJsdoc(({\n  report,\n  utils\n}) => {\n  if (canSkip(utils)) {\n    return;\n  }\n\n  const tagName = utils.getPreferredTagName('returns');\n  const tags = utils.getTags(tagName);\n\n  if (tags.length === 0) {\n    return;\n  }\n\n  if (tags.length > 1) {\n    report('Found more than one @' + tagName + ' declaration.');\n\n    return;\n  }\n\n  // In case a return value is declared in JSDoc, we also expect one in the code.\n  if (utils.hasDefinedTypeReturnTag(tags[0]) && !utils.hasReturnValue()) {\n    report('JSDoc @' + tagName + ' declaration present but return expression not available in function.');\n  }\n}, {\n  meta: {\n    type: 'suggestion'\n  }\n});\n"],"file":"requireReturnsCheck.js"}
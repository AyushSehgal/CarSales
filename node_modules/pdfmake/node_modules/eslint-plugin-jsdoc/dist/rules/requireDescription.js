"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _iterateJsdoc = _interopRequireDefault(require("../iterateJsdoc"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _iterateJsdoc.default)(({
  jsdoc,
  report,
  utils
}) => {
  if (utils.avoidDocs()) {
    return;
  }

  const targetTagName = utils.getPreferredTagName('description');

  const functionExamples = _lodash.default.filter(jsdoc.tags, {
    tag: targetTagName
  });

  if (!functionExamples.length) {
    report('Missing JSDoc @' + targetTagName + ' declaration.');
    return;
  }

  functionExamples.forEach(example => {
    const exampleContent = _lodash.default.compact((example.name + ' ' + example.description).trim().split('\n'));

    if (!exampleContent.length) {
      report('Missing JSDoc @' + targetTagName + ' description.');
    }
  });
}, {
  returns(context) {
    const defaultContexts = ['ArrowFunctionExpression', 'FunctionDeclaration', 'FunctionExpression'];

    const _ref = context.options[0] || {},
          noDefaults = _ref.noDefaults,
          _ref$contexts = _ref.contexts,
          ctxts = _ref$contexts === void 0 ? [] : _ref$contexts;

    const contexts = typeof ctxts === 'string' ? [ctxts] : ctxts;
    return noDefaults ? contexts : [...new Set([...defaultContexts, ...contexts])];
  },

  schema: [{
    additionalProperties: false,
    properties: {
      contexts: {
        oneOf: [{
          items: {
            type: 'string'
          },
          type: 'array'
        }, {
          type: 'string'
        }]
      },
      noDefaults: {
        type: 'boolean'
      }
    },
    type: 'object'
  }],
  type: 'suggestion'
});

exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=requireDescription.js.map
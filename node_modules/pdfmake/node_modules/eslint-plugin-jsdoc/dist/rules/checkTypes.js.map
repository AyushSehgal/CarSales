{"version":3,"sources":["../../src/rules/checkTypes.js"],"names":["strictNativeTypes","jsdocNode","sourceCode","report","utils","context","jsdocTags","filterTags","tag","isTagWithType","preferredTypes","_","get","optionObj","options","noDefaults","unifyParentAndChildTypeChecks","forEach","jsdocTag","invalidTypes","typeAst","type","error","getPreferredTypeInfo","nodeName","hasMatchingPreferredType","isGenericMatch","nonparentType","undefined","node","name","includes","preferred","preferredSetting","push","strictNativeType","toLowerCase","length","fixedType","tagName","badType","preferredType","message","fix","fixer","replaceText","getText","replace","tagValue","replacement","meta","fixable"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {parse, traverse, publish} from 'jsdoctypeparser';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst strictNativeTypes = [\n  'undefined',\n  'null',\n  'boolean',\n  'number',\n  'string',\n  'object',\n  'Array',\n  'Function',\n  'Date',\n  'RegExp'\n];\n\nexport default iterateJsdoc(({\n  jsdocNode,\n  sourceCode,\n  report,\n  utils,\n  context\n}) => {\n  const jsdocTags = utils.filterTags((tag) => {\n    return utils.isTagWithType(tag.tag);\n  });\n\n  const preferredTypes = _.get(context, 'settings.jsdoc.preferredTypes');\n  const optionObj = context.options[0];\n  const noDefaults = _.get(optionObj, 'noDefaults');\n  const unifyParentAndChildTypeChecks = _.get(optionObj, 'unifyParentAndChildTypeChecks');\n\n  jsdocTags.forEach((jsdocTag) => {\n    const invalidTypes = [];\n    let typeAst;\n\n    try {\n      typeAst = parse(jsdocTag.type);\n    } catch (error) {\n      return;\n    }\n\n    const getPreferredTypeInfo = (type, nodeName) => {\n      let hasMatchingPreferredType;\n      let isGenericMatch;\n      if (preferredTypes) {\n        const nonparentType = type === 'ANY' || typeAst.type === 'NAME';\n        isGenericMatch = _.get(preferredTypes, nodeName + '<>') !== undefined &&\n          (unifyParentAndChildTypeChecks || !nonparentType);\n        hasMatchingPreferredType =\n          _.get(preferredTypes, nodeName) !== undefined &&\n            (nonparentType || unifyParentAndChildTypeChecks) ||\n          isGenericMatch;\n      }\n\n      return [hasMatchingPreferredType, isGenericMatch];\n    };\n\n    traverse(typeAst, (node) => {\n      const {type, name} = node;\n      if (['NAME', 'ANY'].includes(type)) {\n        const nodeName = type === 'ANY' ? '*' : name;\n\n        const [hasMatchingPreferredType, isGenericMatch] = getPreferredTypeInfo(type, nodeName);\n\n        let preferred;\n        if (hasMatchingPreferredType) {\n          const preferredSetting = preferredTypes[nodeName + (\n            isGenericMatch ? '<>' : ''\n          )];\n\n          if (!preferredSetting) {\n            invalidTypes.push([nodeName]);\n          } else if (typeof preferredSetting === 'string') {\n            preferred = preferredSetting;\n            invalidTypes.push([nodeName, preferred]);\n          } else if (typeof preferredSetting === 'object') {\n            preferred = _.get(preferredSetting, 'replacement');\n            invalidTypes.push([\n              nodeName,\n              preferred,\n              _.get(preferredSetting, 'message')\n            ]);\n          }\n        } else if (!noDefaults && type === 'NAME') {\n          for (const strictNativeType of strictNativeTypes) {\n            if (strictNativeType.toLowerCase() === nodeName.toLowerCase() &&\n              strictNativeType !== nodeName &&\n\n              // Don't report if user has own map for a strict native type\n              (!preferredTypes || _.get(preferredTypes, strictNativeType) === undefined)\n            ) {\n              preferred = strictNativeType;\n              invalidTypes.push([nodeName, preferred]);\n              break;\n            }\n          }\n        }\n        if (preferred) {\n          if (type === 'ANY') {\n            node.type = 'NAME';\n          }\n          node.name = preferred;\n        }\n      }\n    });\n\n    if (invalidTypes.length) {\n      const fixedType = publish(typeAst);\n\n      const tagName = jsdocTag.tag;\n      invalidTypes.forEach(([badType, preferredType = '', message]) => {\n        const fix = (fixer) => {\n          return fixer.replaceText(\n            jsdocNode,\n            sourceCode.getText(jsdocNode).replace(\n              '{' + jsdocTag.type + '}', '{' + fixedType + '}'\n            )\n          );\n        };\n\n        const tagValue = jsdocTag.name ? ' \"' + jsdocTag.name + '\"' : '';\n\n        report(\n          message ||\n            'Invalid JSDoc @' + tagName + tagValue + ' type \"' + badType +\n              (preferredType ? '\"; prefer: \"' + preferredType : '') +\n              '\".',\n          preferredType ? fix : null,\n          jsdocTag,\n          message ? {\n            badType,\n            preferredType,\n            replacement: preferredType,\n            tagName,\n            tagValue\n          } : null\n        );\n      });\n    }\n  });\n}, {\n  meta: {\n    fixable: 'code',\n    type: 'suggestion'\n  }\n});\n"],"file":"checkTypes.js"}
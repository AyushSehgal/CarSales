{"version":3,"sources":["../../src/rules/checkParamNames.js"],"names":["validateParameterNames","targetTagName","functionParameterNames","jsdoc","report","tags","paramTags","filter","tag","name","includes","some","index","tg","idx","functionParameterName","expectedNames","join","actualNames","map","validateParameterNamesDeep","jsdocParameterNames","lastRealParameter","jsdocParameterName","isPropertyPath","pathRootNodeName","slice","indexOf","endsWith","utils","getFunctionParameterNames","jsdocParameterNamesDeep","getJsdocParameterNamesDeep","getPreferredTagName","isError","meta","type"],"mappings":"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","sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nconst validateParameterNames = (targetTagName : string, functionParameterNames : Array<string>, jsdoc, report) => {\n  if (!jsdoc || !jsdoc.tags) {\n    return false;\n  }\n\n  const paramTags = jsdoc.tags.filter((tag) => {\n    return tag.tag === targetTagName && !tag.name.includes('.');\n  });\n\n  return paramTags.some((tag, index) => {\n    if (paramTags.some((tg, idx) => {\n      return tg.name === tag.name && idx !== index;\n    })) {\n      report('Duplicate @' + targetTagName + ' \"' + tag.name + '\"');\n\n      return true;\n    }\n    const functionParameterName = functionParameterNames[index];\n\n    if (!functionParameterName) {\n      report(\n        `@${targetTagName} \"${tag.name}\" does not match an existing function parameter.`,\n        null,\n        tag\n      );\n\n      return true;\n    }\n\n    if (functionParameterName === '<ObjectPattern>' || functionParameterName === '<ArrayPattern>') {\n      return false;\n    }\n\n    if (functionParameterName !== tag.name) {\n      const expectedNames = functionParameterNames.join(', ');\n      const actualNames = paramTags.map(({name}) => {\n        return name;\n      }).join(', ');\n\n      report(\n        `Expected @${targetTagName} names to be \"${expectedNames}\". Got \"${actualNames}\".`,\n        null,\n        tag\n      );\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nconst validateParameterNamesDeep = (targetTagName : string, jsdocParameterNames : Array<string>, report : Function) => {\n  let lastRealParameter;\n\n  return jsdocParameterNames.some((jsdocParameterName) => {\n    const isPropertyPath = jsdocParameterName.includes('.');\n\n    if (isPropertyPath) {\n      if (!lastRealParameter) {\n        report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") appears before any real parameter.');\n\n        return true;\n      }\n\n      let pathRootNodeName = jsdocParameterName.slice(0, jsdocParameterName.indexOf('.'));\n\n      if (pathRootNodeName.endsWith('[]')) {\n        pathRootNodeName = pathRootNodeName.slice(0, -2);\n      }\n\n      if (pathRootNodeName !== lastRealParameter) {\n        report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") root node name (\"' +\n          pathRootNodeName + '\") does not match previous real parameter name (\"' + lastRealParameter + '\").');\n\n        return true;\n      }\n    } else {\n      lastRealParameter = jsdocParameterName;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report,\n  utils\n}) => {\n  const functionParameterNames = utils.getFunctionParameterNames();\n  const jsdocParameterNamesDeep = utils.getJsdocParameterNamesDeep();\n  const targetTagName = utils.getPreferredTagName('param');\n  const isError = validateParameterNames(targetTagName, functionParameterNames, jsdoc, report);\n\n  if (isError) {\n    return;\n  }\n\n  validateParameterNamesDeep(targetTagName, jsdocParameterNamesDeep, report);\n}, {\n  meta: {\n    type: 'suggestion'\n  }\n});\n"],"file":"checkParamNames.js"}
{"version":3,"sources":["../../src/eslint/getJSDocComment.js"],"names":["isCommentToken","token","type","looksLikeExport","astNode","getJSDocComment","sourceCode","node","findJSDocComment","tokenBefore","getTokenBefore","includeComments","value","charAt","loc","start","line","end","parent","getCommentsBefore","length","test"],"mappings":";;;;;;;AAAA;;;;;AAKA;;;;;;AAMA,MAAMA,cAAc,GAAIC,KAAD,IAAW;AAChC,SAAOA,KAAK,CAACC,IAAN,KAAe,MAAf,IAAyBD,KAAK,CAACC,IAAN,KAAe,OAAxC,IAAmDD,KAAK,CAACC,IAAN,KAAe,SAAzE;AACD,CAFD;AAIA;;;;;;;;;AAOA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAUC,OAAV,EAAmB;AACzC,SAAOA,OAAO,CAACF,IAAR,KAAiB,0BAAjB,IAA+CE,OAAO,CAACF,IAAR,KAAiB,wBAAhE,IACLE,OAAO,CAACF,IAAR,KAAiB,sBADZ,IACsCE,OAAO,CAACF,IAAR,KAAiB,iBAD9D;AAED,CAHD;AAKA;;;;;;;;;;;;AAUA,MAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAAUC,UAAV,EAAsBC,IAAtB,EAA4B;AAClD;;;;;;;;AAQA,QAAMC,gBAAgB,GAAIJ,OAAD,IAAa;AACpC,UAAMK,WAAW,GAAGH,UAAU,CAACI,cAAX,CAA0BN,OAA1B,EAAmC;AAACO,MAAAA,eAAe,EAAE;AAAlB,KAAnC,CAApB;;AAEA,QACEF,WAAW,IACXT,cAAc,CAACS,WAAD,CADd,IAEAA,WAAW,CAACP,IAAZ,KAAqB,OAFrB,IAGAO,WAAW,CAACG,KAAZ,CAAkBC,MAAlB,CAAyB,CAAzB,MAAgC,GAHhC,IAIAT,OAAO,CAACU,GAAR,CAAYC,KAAZ,CAAkBC,IAAlB,GAAyBP,WAAW,CAACK,GAAZ,CAAgBG,GAAhB,CAAoBD,IAA7C,IAAqD,CALvD,EAME;AACA,aAAOP,WAAP;AACD;;AAED,WAAO,IAAP;AACD,GAdD;;AAeA,MAAIS,MAAM,GAAGX,IAAI,CAACW,MAAlB;;AAEA,UAAQX,IAAI,CAACL,IAAb;AACA,SAAK,kBAAL;AACA,SAAK,qBAAL;AACE,aAAOM,gBAAgB,CAACL,eAAe,CAACe,MAAD,CAAf,GAA0BA,MAA1B,GAAmCX,IAApC,CAAvB;;AAEF,SAAK,iBAAL;AACE,aAAOC,gBAAgB,CAACU,MAAM,CAACA,MAAR,CAAvB;;AAEF,SAAK,yBAAL;AACA,SAAK,oBAAL;AACE,UACEA,MAAM,CAAChB,IAAP,KAAgB,gBAAhB,IACAgB,MAAM,CAAChB,IAAP,KAAgB,wBADhB,IAEAgB,MAAM,CAAChB,IAAP,KAAgB,eAHlB,EAIE;AACA,eACE,CAACI,UAAU,CAACa,iBAAX,CAA6BD,MAA7B,EAAqCE,MAAtC,IACA,CAAC,YAAYC,IAAZ,CAAiBH,MAAM,CAAChB,IAAxB,CADD,IAEAgB,MAAM,CAAChB,IAAP,KAAgB,kBAFhB,IAGAgB,MAAM,CAAChB,IAAP,KAAgB,UAJlB,EAKE;AACAgB,UAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;;AAEA,cAAI,CAACA,MAAL,EAAa;AACX;AACD;AACF;;AAED,YAAIA,MAAM,IAAIA,MAAM,CAAChB,IAAP,KAAgB,qBAA1B,IAAmDgB,MAAM,CAAChB,IAAP,KAAgB,SAAvE,EAAkF;AAChF,iBAAOM,gBAAgB,CAACU,MAAD,CAAvB;AACD;AACF;;AAED,aAAOV,gBAAgB,CAACD,IAAD,CAAvB;AAEF;;AACA;AACE,aAAO,IAAP;AArCF;AAuCD,CAjED;;eAmEeF,e","sourcesContent":["/**\n * Obtained from {@link https://github.com/eslint/eslint/blob/master/lib/util/source-code.js#L313}\n * @license MIT\n */\n\n/**\n * Checks if the given token is a comment token or not.\n *\n * @param {Token} token - The token to check.\n * @returns {boolean} `true` if the token is a comment token.\n */\nconst isCommentToken = (token) => {\n  return token.type === 'Line' || token.type === 'Block' || token.type === 'Shebang';\n};\n\n/**\n * Check to see if its a ES6 export declaration.\n *\n * @param {ASTNode} astNode An AST node.\n * @returns {boolean} whether the given node represents an export declaration.\n * @private\n */\nconst looksLikeExport = function (astNode) {\n  return astNode.type === 'ExportDefaultDeclaration' || astNode.type === 'ExportNamedDeclaration' ||\n    astNode.type === 'ExportAllDeclaration' || astNode.type === 'ExportSpecifier';\n};\n\n/**\n * Retrieves the JSDoc comment for a given node.\n *\n * @param {SourceCode} sourceCode The ESLint SourceCode\n * @param {ASTNode} node The AST node to get the comment for.\n * @returns {Token|null} The Block comment token containing the JSDoc comment\n *    for the given node or null if not found.\n * @public\n * @deprecated\n */\nconst getJSDocComment = function (sourceCode, node) {\n  /**\n   * Checks for the presence of a JSDoc comment for the given node and returns it.\n   *\n   * @param {ASTNode} astNode The AST node to get the comment for.\n   * @returns {Token|null} The Block comment token containing the JSDoc comment\n   *    for the given node or null if not found.\n   * @private\n   */\n  const findJSDocComment = (astNode) => {\n    const tokenBefore = sourceCode.getTokenBefore(astNode, {includeComments: true});\n\n    if (\n      tokenBefore &&\n      isCommentToken(tokenBefore) &&\n      tokenBefore.type === 'Block' &&\n      tokenBefore.value.charAt(0) === '*' &&\n      astNode.loc.start.line - tokenBefore.loc.end.line <= 1\n    ) {\n      return tokenBefore;\n    }\n\n    return null;\n  };\n  let parent = node.parent;\n\n  switch (node.type) {\n  case 'ClassDeclaration':\n  case 'FunctionDeclaration':\n    return findJSDocComment(looksLikeExport(parent) ? parent : node);\n\n  case 'ClassExpression':\n    return findJSDocComment(parent.parent);\n\n  case 'ArrowFunctionExpression':\n  case 'FunctionExpression':\n    if (\n      parent.type !== 'CallExpression' &&\n      parent.type !== 'OptionalCallExpression' &&\n      parent.type !== 'NewExpression'\n    ) {\n      while (\n        !sourceCode.getCommentsBefore(parent).length &&\n        !/Function/u.test(parent.type) &&\n        parent.type !== 'MethodDefinition' &&\n        parent.type !== 'Property'\n      ) {\n        parent = parent.parent;\n\n        if (!parent) {\n          break;\n        }\n      }\n\n      if (parent && parent.type !== 'FunctionDeclaration' && parent.type !== 'Program') {\n        return findJSDocComment(parent);\n      }\n    }\n\n    return findJSDocComment(node);\n\n  // falls through\n  default:\n    return null;\n  }\n};\n\nexport default getJSDocComment;\n"],"file":"getJSDocComment.js"}